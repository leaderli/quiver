{
  "title": "字节码指令集",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"margin: 0.5em 0px; line-height: inherit; color: rgb(34, 34, 34); font-family: sans-serif;\"><br></p><table class=\"wikitable sortable jquery-tablesorter\" style=\"background-color: rgb(248, 249, 250); color: rgb(34, 34, 34); margin: 1em 0px; border: 1px solid rgb(162, 169, 177); font-family: sans-serif;\"><thead><tr><th scope=\"col\" class=\"headerSort headerSortUp\" tabindex=\"0\" role=\"columnheader button\" title=\"Sort descending\" style=\"border-color: rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; background-color: rgb(234, 236, 240); text-align: center; background-image: linear-gradient(transparent, transparent), url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2221%22 height=%224%22 viewBox=%220 0 21 4%22%3E %3Cpath d=%22M6.5 4l4-4 4 4z%22/%3E %3C/svg%3E'); cursor: pointer; background-position: 100% 50%; background-repeat: no-repeat no-repeat;\">Mnemonic</th><th scope=\"col\" class=\"headerSort\" tabindex=\"0\" role=\"columnheader button\" title=\"Sort ascending\" style=\"border-color: rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; background-color: rgb(234, 236, 240); text-align: center; background-image: linear-gradient(transparent, transparent), url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2221%22 height=%229%22 viewBox=%220 0 21 9%22%3E %3Cpath d=%22M14.5 5l-4 4-4-4zm0-1l-4-4-4 4z%22/%3E %3C/svg%3E'); cursor: pointer; background-position: 100% 50%; background-repeat: no-repeat no-repeat;\">Opcode<br><i>(in&nbsp;<a href=\"https://en.wikipedia.org/wiki/Hexadecimal\" title=\"Hexadecimal\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\">hex</a>)</i></th><th class=\"headerSort\" tabindex=\"0\" role=\"columnheader button\" title=\"Sort ascending\" style=\"border-color: rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; background-color: rgb(234, 236, 240); text-align: center; background-image: linear-gradient(transparent, transparent), url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2221%22 height=%229%22 viewBox=%220 0 21 9%22%3E %3Cpath d=%22M14.5 5l-4 4-4-4zm0-1l-4-4-4 4z%22/%3E %3C/svg%3E'); cursor: pointer; background-position: 100% 50%; background-repeat: no-repeat no-repeat;\">Opcode (in binary)</th><th scope=\"col\" class=\"headerSort\" tabindex=\"0\" role=\"columnheader button\" title=\"Sort ascending\" style=\"border-color: rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; background-color: rgb(234, 236, 240); text-align: center; background-image: linear-gradient(transparent, transparent), url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2221%22 height=%229%22 viewBox=%220 0 21 9%22%3E %3Cpath d=%22M14.5 5l-4 4-4-4zm0-1l-4-4-4 4z%22/%3E %3C/svg%3E'); cursor: pointer; background-position: 100% 50%; background-repeat: no-repeat no-repeat;\">Other bytes<br>[count]: [operand labels]</th><th scope=\"col\" class=\"headerSort\" tabindex=\"0\" role=\"columnheader button\" title=\"Sort ascending\" style=\"border-color: rgb(162, 169, 177); padding: 0.2em 21px 0.2em 0.4em; background-color: rgb(234, 236, 240); text-align: center; background-image: linear-gradient(transparent, transparent), url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2221%22 height=%229%22 viewBox=%220 0 21 9%22%3E %3Cpath d=%22M14.5 5l-4 4-4-4zm0-1l-4-4-4 4z%22/%3E %3C/svg%3E'); cursor: pointer; background-position: 100% 50%; background-repeat: no-repeat no-repeat;\">Stack<br>[before]→[after]</th><th scope=\"col\" class=\"unsortable\" style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em; background-color: rgb(234, 236, 240); text-align: center;\">Description</th></tr></thead><tbody><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"><i>(no name)</i></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">cb-fd</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">these values are currently unassigned for opcodes and are reserved for future use</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aaload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">32</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load onto the stack a reference from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">53</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store into a reference in an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aconst_null</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">01</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ null</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push a&nbsp;<i>null</i>&nbsp;reference onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">19</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a reference onto the stack from a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aload_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a reference onto the stack from local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aload_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a reference onto the stack from local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aload_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a reference onto the stack from local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aload_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a reference onto the stack from local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">anewarray</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bd</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">count → arrayref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">create a new array of references of length&nbsp;<i>count</i>&nbsp;and component type identified by the class reference&nbsp;<i>index</i>&nbsp;(<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>) in the constant pool</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">areturn</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref → [empty]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return a reference from a method</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arraylength</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">be</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref → length</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">get the length of an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">astore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a reference into a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">astore_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a reference into local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">astore_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a reference into local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">astore_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a reference into local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">astore_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a reference into local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">athrow</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bf</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref → [empty], objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">throws an error or exception (notice that the rest of the stack is cleared, leaving only a reference to the Throwable)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">baload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">33</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a byte or Boolean value from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">54</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a byte or Boolean value into an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bipush</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">10</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: byte</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push a&nbsp;<i>byte</i>&nbsp;onto the stack as an integer&nbsp;<i>value</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">breakpoint</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ca</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">reserved for breakpoints in Java debuggers; should not appear in any class file</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">caload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">34</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a char from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">castore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">55</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a char into an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">checkcast</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref → objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">checks whether an&nbsp;<i>objectref</i>&nbsp;is of a certain type, the class reference of which is in the constant pool at&nbsp;<i>index</i>&nbsp;(<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">d2f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">90</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a double to a float</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">d2i</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a double to an int</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">d2l</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a double to a long</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dadd</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">63</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">add two doubles</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">daload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">31</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a double from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">52</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a double into an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dcmpg</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">98</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">compare two doubles</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dcmpl</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">97</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">compare two doubles</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dconst_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 0.0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push the constant&nbsp;<i>0.0</i>&nbsp;(a&nbsp;<i>double</i>) onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dconst_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 1.0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push the constant&nbsp;<i>1.0</i>&nbsp;(a&nbsp;<i>double</i>) onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ddiv</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">6f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">divide two doubles</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">18</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a double&nbsp;<i>value</i>&nbsp;from a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dload_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">26</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a double from local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dload_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">27</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a double from local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dload_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">28</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a double from local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dload_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">29</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a double from local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dmul</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">6b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">multiply two doubles</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dneg</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">77</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">negate a double</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">drem</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">73</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">get the remainder from a division between two doubles</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dreturn</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">af</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → [empty]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return a double from a method</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dstore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">39</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a double&nbsp;<i>value</i>&nbsp;into a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dstore_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">47</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a double into local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dstore_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">48</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a double into local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dstore_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">49</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a double into local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dstore_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a double into local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dsub</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">67</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">subtract a double from another</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dup</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">59</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → value, value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">duplicate the value on top of the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dup2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">5c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">{value2, value1} → {value2, value1}, {value2, value1}</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">duplicate top two stack words (two values, if value1 is not double nor long; a single value, if value1 is double or long)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dup2_x1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">5d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value3, {value2, value1} → {value2, value1}, value3, {value2, value1}</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">duplicate two words and insert beneath third word (see explanation above)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dup2_x2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">5e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">{value4, value3}, {value2, value1} → {value2, value1}, {value4, value3}, {value2, value1}</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">duplicate two words and insert beneath fourth word</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dup_x1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">5a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value2, value1 → value1, value2, value1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">insert a copy of the top value into the stack two values from the top. value1 and value2 must not be of the type double or long.</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">dup_x2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">5b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value3, value2, value1 → value1, value3, value2, value1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">insert a copy of the top value into the stack two (if value2 is double or long it takes up the entry of value3, too) or three values (if value2 is neither double nor long) from the top</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">f2d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a float to a double</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">f2i</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a float to an int</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">f2l</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a float to a long</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fadd</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">62</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">add two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">faload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">30</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a float from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">51</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a float in an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fcmpg</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">96</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">compare two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fcmpl</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">95</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">compare two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fconst_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 0.0f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push&nbsp;<i>0.0f</i>&nbsp;on the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fconst_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 1.0f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push&nbsp;<i>1.0f</i>&nbsp;on the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fconst_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 2.0f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push&nbsp;<i>2.0f</i>&nbsp;on the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fdiv</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">6e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">divide two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">17</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a float&nbsp;<i>value</i>&nbsp;from a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fload_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">22</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a float&nbsp;<i>value</i>&nbsp;from local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fload_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">23</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a float&nbsp;<i>value</i>&nbsp;from local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fload_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">24</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a float&nbsp;<i>value</i>&nbsp;from local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fload_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">25</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a float&nbsp;<i>value</i>&nbsp;from local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fmul</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">6a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">multiply two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fneg</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">76</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">negate a float</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">frem</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">72</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">get the remainder from a division between two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">freturn</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ae</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → [empty]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return a float</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fstore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">38</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a float&nbsp;<i>value</i>&nbsp;into a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fstore_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">43</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a float&nbsp;<i>value</i>&nbsp;into local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fstore_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">44</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a float&nbsp;<i>value</i>&nbsp;into local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fstore_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">45</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a float&nbsp;<i>value</i>&nbsp;into local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fstore_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">46</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a float&nbsp;<i>value</i>&nbsp;into local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fsub</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">66</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">subtract two floats</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">getfield</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">get a field&nbsp;<i>value</i>&nbsp;of an object&nbsp;<i>objectref</i>, where the field is identified by field reference in the constant pool&nbsp;<i>index</i>&nbsp;(<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">getstatic</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">get a static field&nbsp;<i>value</i>&nbsp;of a class, where the field is identified by field reference in the constant pool&nbsp;<i>index</i>&nbsp;(<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">goto</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a7</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[no change]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">goes to another instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">goto_w</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c8</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4: branchbyte1, branchbyte2, branchbyte3, branchbyte4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[no change]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">goes to another instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed int constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 24 + branchbyte2 &lt;&lt; 16 + branchbyte3 &lt;&lt; 8 + branchbyte4</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">i2b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">91</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert an int into a byte</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">i2c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">92</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert an int into a character</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">i2d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">87</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert an int into a double</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">i2f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">86</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert an int into a float</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">i2l</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">85</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert an int into a long</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">i2s</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">93</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert an int into a short</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iadd</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">60</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">add two ints</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iaload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load an int from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iand</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">7e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">perform a bitwise AND on two integers</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store an int into an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">03</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value 0 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">04</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value 1 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">05</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value 2 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">06</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value 3 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">07</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value 4 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_5</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">08</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 5</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value 5 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iconst_m1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">02</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ -1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load the int value −1 onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">idiv</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">6c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">divide two integers</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_acmpeq</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a5</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if references are equal, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_acmpne</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a6</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if references are not equal, branch to instruction at&nbsp;<i>branchoffset</i>(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_icmpeq</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">9f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if ints are equal, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_icmpge</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value1</i>&nbsp;is greater than or equal to&nbsp;<i>value2</i>, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_icmpgt</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value1</i>&nbsp;is greater than&nbsp;<i>value2</i>, branch to instruction at&nbsp;<i>branchoffset</i>(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_icmple</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value1</i>&nbsp;is less than or equal to&nbsp;<i>value2</i>, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_icmplt</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value1</i>&nbsp;is less than&nbsp;<i>value2</i>, branch to instruction at&nbsp;<i>branchoffset</i>(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if_icmpne</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if ints are not equal, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifeq</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">99</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is 0, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifge</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">9c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is greater than or equal to 0, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifgt</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">9d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is greater than 0, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifle</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">9e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is less than or equal to 0, branch to instruction at&nbsp;<i>branchoffset</i>(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iflt</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">9b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is less than 0, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifne</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">9a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is not 0, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifnonnull</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c7</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is not null, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ifnull</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c6</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">if&nbsp;<i>value</i>&nbsp;is null, branch to instruction at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iinc</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">84</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: index, const</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[No change]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">increment local variable&nbsp;<i>#index</i>&nbsp;by signed byte&nbsp;<i>const</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">15</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load an int&nbsp;<i>value</i>&nbsp;from a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iload_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load an int&nbsp;<i>value</i>&nbsp;from local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iload_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load an int&nbsp;<i>value</i>&nbsp;from local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iload_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load an int&nbsp;<i>value</i>&nbsp;from local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iload_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load an int&nbsp;<i>value</i>&nbsp;from local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">impdep1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">fe</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1111 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">reserved for implementation-dependent operations within debuggers; should not appear in any class file</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">impdep2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ff</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1111 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">reserved for implementation-dependent operations within debuggers; should not appear in any class file</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">imul</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">68</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">multiply two integers</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ineg</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">74</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">negate int</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">instanceof</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">determines if an object&nbsp;<i>objectref</i>&nbsp;is of a given type, identified by class reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokedynamic</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ba</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4: indexbyte1, indexbyte2, 0, 0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[arg1, [arg2 ...]] → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokes a dynamic method and puts the result on the stack (might be void); the method is identified by method reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokeinterface</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b9</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4: indexbyte1, indexbyte2, count, 0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref, [arg1, arg2, ...] → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokes an interface method on object&nbsp;<i>objectref</i>&nbsp;and puts the result on the stack (might be void); the interface method is identified by method reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokespecial</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b7</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref, [arg1, arg2, ...] → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invoke instance method on object&nbsp;<i>objectref</i>&nbsp;and puts the result on the stack (might be void); the method is identified by method reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokestatic</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b8</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[arg1, arg2, ...] → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invoke a static method and puts the result on the stack (might be void); the method is identified by method reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invokevirtual</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b6</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref, [arg1, arg2, ...] → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">invoke virtual method on object&nbsp;<i>objectref</i>&nbsp;and puts the result on the stack (might be void); the method is identified by method reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ior</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">80</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bitwise int OR</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">irem</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">70</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">logical int remainder</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ireturn</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ac</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → [empty]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return an integer from a method</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ishl</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">78</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">int shift left</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ishr</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">7a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">int arithmetic shift right</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">istore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">36</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store int&nbsp;<i>value</i>&nbsp;into variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">istore_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store int&nbsp;<i>value</i>&nbsp;into variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">istore_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store int&nbsp;<i>value</i>&nbsp;into variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">istore_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store int&nbsp;<i>value</i>&nbsp;into variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">istore_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store int&nbsp;<i>value</i>&nbsp;into variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">isub</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">64</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">int subtract</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">iushr</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">7c</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">int logical shift right</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ixor</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">82</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">int xor</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">jsr</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a8</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: branchbyte1, branchbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ address</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">jump to subroutine at&nbsp;<i>branchoffset</i>&nbsp;(signed short constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 8 + branchbyte2</span>) and place the return address on the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">jsr_w</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c9</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">4: branchbyte1, branchbyte2, branchbyte3, branchbyte4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ address</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">jump to subroutine at&nbsp;<i>branchoffset</i>&nbsp;(signed int constructed from unsigned bytes&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">branchbyte1 &lt;&lt; 24 + branchbyte2 &lt;&lt; 16 + branchbyte3 &lt;&lt; 8 + branchbyte4</span>) and place the return address on the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">l2d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a long to a double</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">l2f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">89</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a long to a float</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">l2i</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">88</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">convert a long to a int</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ladd</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">61</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">add two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">laload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a long from an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">land</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">7f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"><a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\" title=\"Bitwise operation\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\">bitwise</a>&nbsp;AND of two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">50</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a long to an array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lcmp</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">94</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1001 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push 0 if the two longs are the same, 1 if value1 is greater than value2, -1 otherwise</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lconst_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">09</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 0L</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push&nbsp;<i>0L</i>&nbsp;(the number&nbsp;<a href=\"https://en.wikipedia.org/wiki/Zero\" class=\"mw-redirect\" title=\"Zero\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\">zero</a>&nbsp;with type&nbsp;<i>long</i>) onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lconst_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0a</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ 1L</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push&nbsp;<i>1L</i>&nbsp;(the number&nbsp;<a href=\"https://en.wikipedia.org/wiki/One\" class=\"mw-redirect\" title=\"One\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\">one</a>&nbsp;with type&nbsp;<i>long</i>) onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ldc</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">12</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push a constant&nbsp;<i>#index</i>&nbsp;from a constant pool (String, int, float, Class, java.lang.invoke.MethodType, or java.lang.invoke.MethodHandle) onto the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ldc2_w</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">14</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push a constant&nbsp;<i>#index</i>&nbsp;from a constant pool (double or long) onto the stack (wide&nbsp;<i>index</i>&nbsp;is constructed as&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ldc_w</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">13</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push a constant&nbsp;<i>#index</i>&nbsp;from a constant pool (String, int, float, Class, java.lang.invoke.MethodType, or java.lang.invoke.MethodHandle) onto the stack (wide&nbsp;<i>index</i>&nbsp;is constructed as&nbsp;<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ldiv</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">6d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">divide two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">16</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a long value from a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lload_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1e</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a long value from a local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lload_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a long value from a local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lload_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">20</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a long value from a local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lload_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">21</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0010 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load a long value from a local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lmul</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">69</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">multiply two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lneg</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">75</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">negate a long</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lookupswitch</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ab</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">8+: &lt;0–3 bytes padding&gt;, defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, npairs1, npairs2, npairs3, npairs4, match-offset pairs...</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">key →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a target address is looked up from a table using a key and execution continues from the instruction at that address</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lor</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">81</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bitwise OR of two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lrem</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">71</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">remainder of division of two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lreturn</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ad</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value → [empty]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return a long value</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lshl</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">79</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bitwise shift left of a long&nbsp;<i>value1</i>&nbsp;by int&nbsp;<i>value2</i>&nbsp;positions</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lshr</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">7b</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bitwise shift right of a long&nbsp;<i>value1</i>&nbsp;by int&nbsp;<i>value2</i>&nbsp;positions</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lstore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">37</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a long&nbsp;<i>value</i>&nbsp;in a local variable&nbsp;<i>#index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lstore_0</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a long&nbsp;<i>value</i>&nbsp;in a local variable 0</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lstore_1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">40</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a long&nbsp;<i>value</i>&nbsp;in a local variable 1</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lstore_2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">41</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a long&nbsp;<i>value</i>&nbsp;in a local variable 2</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lstore_3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">42</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0100 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store a long&nbsp;<i>value</i>&nbsp;in a local variable 3</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lsub</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">65</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0110 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">subtract two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lushr</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">7d</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0111 1101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bitwise shift right of a long&nbsp;<i>value1</i>&nbsp;by int&nbsp;<i>value2</i>&nbsp;positions, unsigned</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">lxor</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">83</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1000 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value1, value2 → result</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bitwise XOR of two longs</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">monitorenter</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">enter monitor for object (\"grab the lock\" – start of synchronized() section)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">monitorexit</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">exit monitor for object (\"release the lock\" – end of synchronized() section)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">multianewarray</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c5</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3: indexbyte1, indexbyte2, dimensions</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">count1, [count2,...] → arrayref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">create a new array of&nbsp;<i>dimensions</i>&nbsp;dimensions of type identified by class reference in constant pool&nbsp;<i>index</i>&nbsp;(<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>); the sizes of each dimension is identified by&nbsp;<i>count1</i>, [<i>count2</i>, etc.]</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">new</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bb</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ objectref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">create new object of type identified by class reference in constant pool&nbsp;<i>index</i>&nbsp;(<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">newarray</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">bc</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 1100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: atype</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">count → arrayref</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">create new array with&nbsp;<i>count</i>&nbsp;elements of primitive type identified by&nbsp;<i>atype</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">nop</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">00</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0000 0000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[No change]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">perform no operation</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">pop</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">57</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">discard the top value on the stack</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">pop2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">58</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1000</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">{value2, value1} →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">discard the top two values on the stack (or one value, if it is a double or long)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">putfield</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b5</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">objectref, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">set field to&nbsp;<i>value</i>&nbsp;in an object&nbsp;<i>objectref</i>, where the field is identified by a field reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">putstatic</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b3</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0011</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: indexbyte1, indexbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">set static field to&nbsp;<i>value</i>&nbsp;in a class, where the field is identified by a field reference&nbsp;<i>index</i>&nbsp;in constant pool (<span class=\"monospaced\" style=\"font-family: monospace, monospace;\">indexbyte1 &lt;&lt; 8 + indexbyte2</span>)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">ret</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">a9</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1: index</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[No change]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">continue execution from address taken from a local variable&nbsp;<i>#index</i>(the asymmetry with jsr is intentional)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">b1</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1011 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ [empty]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">return void from method</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">saload</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">35</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0011 0101</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index → value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">load short from array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">sastore</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">56</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 0110</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">arrayref, index, value →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">store short to array</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">sipush</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">11</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0001 0001</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">2: byte1, byte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">→ value</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">push a short onto the stack as an integer&nbsp;<i>value</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">swap</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">5f</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">0101 1111</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\"></td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">value2, value1 → value1, value2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">swaps two top words on the stack (note that value1 and value2 must not be double or long)</td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">tableswitch</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">aa</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1010 1010</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">16+: [0–3 bytes padding], defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, lowbyte1, lowbyte2, lowbyte3, lowbyte4, highbyte1, highbyte2, highbyte3, highbyte4, jump offsets...</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">index →</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">continue execution from an address in the table at offset&nbsp;<i>index</i></td></tr><tr><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">wide</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">c4</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">1100 0100</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">3/5: opcode, indexbyte1, indexbyte2<br>or<br>iinc, indexbyte1, indexbyte2, countbyte1, countbyte2</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">[same as for corresponding instructions]</td><td style=\"border-color: rgb(162, 169, 177); padding: 0.2em 0.4em;\">execute&nbsp;<i>opcode</i>, where&nbsp;<i>opcode</i>&nbsp;is either iload, fload, aload, lload, dload, istore, fstore, astore, lstore, dstore, or ret, but assume the&nbsp;<i>index</i>is 16 bit; or execute iinc, where the&nbsp;<i>index</i>&nbsp;is 16 bits and the constant to increment by is a signed 16 bit short</td></tr></tbody></table>"
    }
  ]
}