{
  "title": "tips",
  "cells": [
    {
      "type": "text",
      "data": "将常量放在接口中，通过继承该接口，调用常量"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public interface ClassConstants{\n   int CONSUMER = 1;//接口中变量默认为 static final\n   int DISPLAY = 2;\n}"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin: 0in;\">查看Class是否是基本类型</p>\n\n<!--EndFragment-->"
    },
    {
      "type": "code",
      "language": "java",
      "data": "clasz.isPrimitive();"
    },
    {
      "type": "text",
      "data": "查看类是否为基本类型或包装类型"
    },
    {
      "type": "code",
      "language": "java",
      "data": "import org.apache.commons.lang3.ClassUtils;\nClassUtils.isPrimitiveOrWrapper(klass)"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin: 0in;\"><span lang=\"zh-CN\">String</span><span lang=\"en-US\">\n替换 正则匹配组</span></p>\n\n<!--EndFragment-->"
    },
    {
      "type": "code",
      "language": "java",
      "data": "String s = \"HelloWorldMyNameIsCarl\".replaceAll(\"(.)([A-Z])\", \"$1_$2\");\nString s = \"1.1\".replaceAll(\"(\\\\.\\\\d)$\", \"$10\");//$1表示前面正则表达式组1所捕获到的字符"
    },
    {
      "type": "text",
      "data": "设置SAXReader的feature属性，禁止校验dtd文件：<br>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "import com.sun.org.apache.xerces.internal.impl.Constants;  \n\n/**\n * 在读取文件时，去掉dtd的验证，可以缩短运行时间  \n */\npublic static SAXReader getSAXReader(){  \n \tSAXReader saxReader = new SAXReader();  \n     try {  \n         saxReader.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);  //设置不需要校验头文件  \n     } catch (Exception e) {  \n         e.printStackTrace();  \n     }  \n     return saxReader;  \n }"
    },
    {
      "type": "text",
      "data": "inputstream to String"
    },
    {
      "type": "code",
      "language": "java",
      "data": "import org.springframework.util.StreamUtils;\n...\npublic void test() throws IOException {\n   StreamUtils.copyToString(ClassLoader.getSystemResourceAsStream(\"banner.txt\"), Charset.forName(\"utf-8\"));\n}"
    },
    {
      "type": "text",
      "data": "切割字符串"
    },
    {
      "type": "code",
      "language": "java",
      "data": "String value = \"Notice:4001\";\nStringTokenizer st = new StringTokenizer(value, \":\");\nif(st.hasMoreElements()){\n  System.out.println(st.nextToken());\n}"
    },
    {
      "type": "text",
      "data": "获取当前执行的方法名"
    },
    {
      "type": "code",
      "language": "java",
      "data": "new Object(){}.getClass().getEncloseingMethod().getName();"
    },
    {
      "type": "text",
      "data": "读取properties 中文乱码解决"
    },
    {
      "type": "code",
      "language": "java",
      "data": "properties.load(new InputStreamReader(AutoConfig.class.getResourceAsStream(\"/application.properties\"),\"utf-8\"));"
    },
    {
      "type": "text",
      "data": "<div><span style=\"font-family: 'Microsoft YaHei'; background-color: rgb(255, 255, 255);\">对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，可以根据这个特性，直接用静态类常量来获取基本变量的初始值。</span><br></div><img alt=\"\" src=\"quiver-image-url/12E96EB5BBAC8CCED40B076506AF19C2.jpg\" width=\"261\" height=\"323\">"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class Primitive {\n  public static int i; //默认值0\n  public static char c; //默认值'\\u0000'\n}"
    },
    {
      "type": "text",
      "data": "如何修改final修饰符的值"
    },
    {
      "type": "code",
      "language": "java",
      "data": "String str = \"fuck\";\n\nField value = String.class.getDeclaredField(\"value\");\n//Field中包含当前属性的修饰符，通过改变修饰符的final属性，达到重新赋值的功能\nField modifier = Field.class.getDeclaredField(\"modifiers\");\nmodifier.setAccessible(true);\nmodifier.set(value, value.getModifiers() & ~Modifier.FINAL);\n\nvalue.setAccessible(true);\nvalue.set(str, \"notfuck\".toCharArray());\n//修改成功后重新加上final修饰符\nmodifier.set(value, value.getModifiers() | Modifier.FINAL);}"
    }
  ]
}