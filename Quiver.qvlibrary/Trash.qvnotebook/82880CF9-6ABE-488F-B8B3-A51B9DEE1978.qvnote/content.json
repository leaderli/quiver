{
  "title": "namespace and context",
  "cells": [
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin: 0in; font-size: 15px;\"><font face=\"Menlo\"><span style=\"background-color: rgb(255, 255, 255);\"><b>命名空间</b></span></font></p><p style=\"margin:0in\"><font face=\"Menlo\"><span style=\"background-color: white;\" lang=\"en-US\">全局变量会绑定到</span><span style=\"color: rgb(122, 122, 122); background-color: white;\" lang=\"zh-CN\">window</span><span style=\"background-color: white;\" lang=\"zh-CN\">上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</span></font><span style=\"font-family: Menlo; background-color: white;\">减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</span></p>\n\n<!--EndFragment-->"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "//唯一的全局变量MYAPP:\nvar MYAPP = {};\n//其他变量:\nMYAPP.name = 'myapp';\nMYAPP.version = 1.0;\n//其他函数:\nMYAPP.foo = function () {\n    return 'foo';\n};"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin:0in\"><font face=\"Menlo\"><span style=\"background-color: white;\" lang=\"en-US\">把自己的代码全部放入唯一的名字空间</span><span style=\"color: rgb(122, 122, 122); background-color: white;\" lang=\"zh-CN\">MYAPP</span><span style=\"background-color: white;\" lang=\"zh-CN\">中，会大大减少全局变量冲突的可能。</span></font><span style=\"font-family: Menlo; background-color: white;\">许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。</span></p>\n\n<!--EndFragment-->"
    },
    {
      "type": "text",
      "data": "<font face=\"Menlo\" size=\"2\" style=\"font-size: 14px;\"><b>执行上下文</b></font><div>\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin: 0in;\"><font face=\"Menlo\" size=\"2\"><span style=\"color: rgb(112, 48, 160);\">函数表达式</span>和<span style=\"color: rgb(112, 48, 160);\">函数声明</span>。虽然两者都很常用，但是这两者在<span style=\"color: rgb(180, 53, 18);\">准备工作</span>时，却是两种待遇。</font></p>\n\n<!--EndFragment--></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "console.log(f1);// function f1(){}; \nconsole.log(f2);//undefined\nfunction f1(){};\nvar f2 = function(){};"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin: 0in; color: rgb(117, 112, 112);\"><span style=\"background-color: white;\"><font face=\"Menlo\">在初始化时，对待函数表达式就像对待“ var a = 10\n”这样的变量一样，只是声明。而对待函数声明时，却把函数整个赋值了。</font></span></p>"
    },
    {
      "type": "text",
      "data": "<p style=\"margin: 0in; color: black;\"><font face=\"Menlo\"></font></p>\n\n<p style=\"margin: 0in; color: black;\"><font face=\"Menlo\">全局代码的上下文环境数据内容为:</font></p><p style=\"margin: 0in;\"><font face=\"Menlo\"><span class=\"Apple-tab-span\" style=\"color: black; white-space: pre;\">\t</span><font color=\"#929292\">普通变量(包括函数表达式) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;默认赋值为undefined</font></font></p><p style=\"margin: 0in;\"><font face=\"Menlo\" color=\"#929292\"><span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>函数声明(</font><font color=\"#0096ff\"><font face=\"Menlo\">f</font><font face=\"Menlo\">unction(){}</font></font><font face=\"Menlo\" color=\"#929292\">)<span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 赋值</font></p><p style=\"margin: 0in;\"><font face=\"Menlo\" color=\"#929292\"><span class=\"Apple-tab-span\" style=\"white-space: pre;\">\t</span>this &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;赋值</font></p><p style=\"margin: 0in; color: black;\"><font face=\"Menlo\">如果代码段是函数体，那么在此基础上需要附加：</font></p><p style=\"margin: 0in;\"><font face=\"Menlo\"><span class=\"Apple-tab-span\" style=\"color: black; white-space: pre;\">\t</span><font color=\"#929292\">arguments <span class=\"Apple-tab-span\" style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;赋值</font></font></p><p style=\"margin: 0in;\"><font face=\"Menlo\" color=\"#929292\"><span class=\"Apple-tab-span\" style=\"white-space: pre;\">\t</span>自由变量的取值作用域 <span class=\"Apple-tab-span\" style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;赋值</font></p>\n\n<!--EndFragment-->"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin:0in;color:#0070C0\"><font face=\"Menlo\"><span lang=\"en-US\">给执行上下文环境下一个通俗的定义</span><span lang=\"en-US\">——</span><span lang=\"en-US\">在执行代码之前，把将要用到的所有的变量都事先拿出来，有的直接赋值了，有的先用</span><span lang=\"zh-CN\">undefined</span><span lang=\"zh-CN\">占个空。</span></font></p>\n\n<!--EndFragment-->"
    },
    {
      "type": "text",
      "data": "<div style=\"font-size: 15px;\"><font face=\"Menlo\"><b>作用域</b></font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\"><font color=\"#a9a9a9\">1.</font>在object内的function this指向object，而属于function内部的闭包函数this指向window对象。</font><span style=\"font-family: Menlo;\">纯function this也指向window对象</span></div>"
    },
    {
      "type": "text",
      "data": "<div><font face=\"Menlo\"><font color=\"#a9a9a9\">2.</font>自由变量</font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">在A作用域中使用的变量x，却没有在A作用域中声明（即在其他作用域中声明的），对于A作用域来说，x就是一个自由变量。如下:</font></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var x = 10;\nfunction fn(){\n  var b = 20;\n  console.log(x+b)//这里的x在这里就是一个自由变量\n}"
    },
    {
      "type": "text",
      "data": "<div><font face=\"Menlo\">如上程序中，在调用fn()函数时，函数体中第6行。取b的值就直接可以在fn作用域中取，因为b就是在这里定义的。而取x的值时，就需要到另一个作用域中取。到哪个作用域中取呢？</font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">有人说过要到父作用域中取，其实有时候这种解释会产生歧义。例如：</font></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var x = 10;\nfunction fn(){\n  console.log(x);\n}\nfunction show(f){\n  var x = 20;\n  (function (){\n    f(); //10 而不是20\n  })();\n}\nshow(fn);"
    },
    {
      "type": "text",
      "data": "<font face=\"Menlo\">要到创建这个函数的那个作用域中取值——是“创建”，而不是“调用”，切记切记——其实这就是所谓的“静态作用域”</font>"
    },
    {
      "type": "text",
      "data": "<font color=\"#a9a9a9\">3. </font><font color=\"#d783ff\"><span lang=\"en-US\" style=\"font-size: 11pt; font-family: Merriweather; background-color: white;\">只有函数才能创建作用域</span><span lang=\"zh-CN\" style=\"font-size: 11pt; font-family: 'Microsoft YaHei'; background-color: white;\">，另外对于函数来说，上下文环境是在调用的时候创建的，作用域之间的变量是相互独立的</span></font>"
    },
    {
      "type": "text",
      "data": "<font face=\"Menlo\"><font color=\"#a9a9a9\">4.</font>闭包中的自由变量是去创建函数的作用域去取值的，包含闭包的函数在执行完成后是不会销毁上下文环境，因为闭包中的自由变量可能需要去函数的上下文环境去取值\n\n</font><!--EndFragment-->"
    }
  ]
}