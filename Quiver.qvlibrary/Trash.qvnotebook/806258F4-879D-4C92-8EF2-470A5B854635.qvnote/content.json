{
  "title": "parameters",
  "cells": [
    {
      "type": "text",
      "data": "<table border=\"1\" class=\"CALSTABLE\" style=\"font-family: -webkit-standard;\"><thead><tr><th align=\"LEFT\" valign=\"MIDDLE\">Character</th><th align=\"LEFT\" valign=\"MIDDLE\">Definition</th></tr></thead><tbody><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$*</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, it expands to a single word with the value of each parameter separated by the first character of the&nbsp;<tt class=\"varname\">IFS</tt>&nbsp;special variable.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$@</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the positional parameters, starting from one. When the expansion occurs within double quotes, each parameter expands to a separate word.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$#</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the number of positional parameters in decimal.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$?</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the exit status of the most recently executed foreground pipeline.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$-</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">A hyphen expands to the current option flags as specified upon invocation, by the&nbsp;<b class=\"command\">set</b>&nbsp;built-in command, or those set by the shell itself (such as the&nbsp;<tt class=\"option\">-i</tt>).</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$$</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the process ID of the shell.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$!</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the process ID of the most recently executed background (asynchronous) command.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$0</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">Expands to the name of the shell or shell script.</td></tr><tr><td align=\"LEFT\" valign=\"MIDDLE\"><tt class=\"varname\">$_</tt></td><td align=\"LEFT\" valign=\"MIDDLE\">The underscore variable is set at shell startup and contains the absolute file name of the shell or script being executed as passed in the argument list. Subsequently, it expands to the last argument to the previous command, after expansion. It is also set to the full pathname of each command executed and placed in the environment exported to that command. When checking mail, this parameter holds the name of the mail file.</td></tr></tbody></table>"
    },
    {
      "type": "text",
      "data": "<div><font face=\"Menlo\">shell中可能经常能看到：<font color=\"#009051\">echo log &gt; /dev/null 2&gt;&amp;1</font></font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">命令的结果可以通过%&gt;的形式来定义输出</font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">/dev/null ：代表空设备文件</font></div><div><font face=\"Menlo\">&gt; &nbsp;：代表重定向到哪里，例如：echo \"123\" &gt; /home/123.txt</font></div><div><font face=\"Menlo\">1 &nbsp;：表示stdout标准输出，系统默认值是1，所以\"&gt;/dev/null\"等同于\"1&gt;/dev/null\"</font></div><div><font face=\"Menlo\">2 &nbsp;：表示stderr标准错误</font></div><div><font face=\"Menlo\">&amp; &nbsp;：表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">1 &gt; /dev/null 2&gt;&amp;1 语句含义：</font></div><div><font face=\"Menlo\">1 &gt; /dev/null ： 首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。</font></div><div><font face=\"Menlo\">2&gt;&amp;1 ：接着，标准错误输出重定向（等同于）标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</font></div><div></div>"
    },
    {
      "type": "text",
      "data": "<div><font face=\"Menlo\"><br></font></div><div><div><font face=\"Menlo\">cmd &gt;a 2&gt;a 和 cmd &gt;a 2&gt;&amp;1 为什么不同？</font></div><div><font face=\"Menlo\">cmd &gt;a 2&gt;a ：stdout和stderr都直接送往文件 a ，a文件会被打开两遍，由此导致stdout和stderr互相覆盖。</font></div><div><font face=\"Menlo\">cmd &gt;a 2&gt;&amp;1 ：stdout直接送往文件a ，stderr是继承了FD1的管道之后，再被送往文件a 。a文件只被打开一遍，就是FD1将其打开。</font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">两者的不同点在于：</font></div><div><font face=\"Menlo\"><br></font></div><div><font face=\"Menlo\">cmd &gt;a 2&gt;a 相当于使用了FD1、FD2两个互相竞争使用文件 a 的管道；</font></div><div><font face=\"Menlo\">cmd &gt;a 2&gt;&amp;1 只使用了一个管道FD1，但已经包括了stdout和stderr。</font></div><div><font face=\"Menlo\">从IO效率上来讲，cmd &gt;a 2&gt;&amp;1的效率更高。</font></div><div><br></div></div><div></div>"
    },
    {
      "type": "text",
      "data": "<div><font face=\"Menlo\"><span style=\"box-sizing: border-box; outline: 0px; word-wrap: break-word;\">在shell中，每个进程都和三个系统文件 相关联：</span><span style=\"box-sizing: border-box; outline: 0px; word-wrap: break-word; color: rgb(204, 0, 0);\">标准输入stdin，标准输出stdout、标准错误stderr</span><span style=\"box-sizing: border-box; outline: 0px; word-wrap: break-word;\">，三个系统文件的文件描述符分别为</span><span style=\"box-sizing: border-box; outline: 0px; word-wrap: break-word; color: rgb(204, 0, 0);\">0，1、2</span><span style=\"box-sizing: border-box; outline: 0px; word-wrap: break-word;\">。所以这里2&gt;&amp;1 的意思就是将标准错误也输出到标准输出当中。</span></font><br></div>"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}