{
  "title": "async",
  "cells": [
    {
      "type": "text",
      "data": "\n\n\n\n\n\n\n<p style=\"margin: 0in;\"><!--StartFragment--><font face=\"Menlo\"><span style=\"color: black;\" lang=\"zh-CN\">配置类实现</span><span style=\"color: black;\" lang=\"en-US\"> </span><span style=\"color: rgb(112, 48, 160);\" lang=\"en-US\">AsyncConfigurer </span><span style=\"color: black;\" lang=\"en-US\">接口并重写 </span><span style=\"color: rgb(112, 48, 160);\" lang=\"zh-CN\">getAsyncExecutor</span><span style=\"color: black;\" lang=\"en-US\"> </span><span style=\"color: black;\" lang=\"en-US\">方法</span><span style=\"color: black;\" lang=\"zh-CN\">，返回一个</span><span style=\"color: rgb(112, 48, 160);\" lang=\"zh-CN\">ThreadPoolTaskExecutor</span><span style=\"color: black;\" lang=\"zh-CN\">，这样我们就获得了一个基于线程池的</span><span style=\"color: rgb(112, 48, 160);\" lang=\"zh-CN\">Task</span><span style=\"color: rgb(112, 48, 160);\" lang=\"en-US\">Executor</span></font><!--EndFragment--></p>"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n<!--StartFragment-->\n\n<p style=\"margin: 0in;\"><font face=\"Menlo\"><font color=\"#009193\"><span lang=\"en-US\">@</span><span lang=\"zh-CN\">EnableAsync</span></font><span lang=\"en-US\">&nbsp; </span><span lang=\"en-US\">开启异步执行机制</span><span lang=\"zh-CN\">，只需要配置一次即可</span></font></p>\n\n<!--EndFragment-->"
    },
    {
      "type": "code",
      "language": "java",
      "data": "import org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\nimport java.util.concurrent.Executor;\n\n@Configuration\n@EnableAsync\npublic class TaskExecutorConfig implements AsyncConfigurer {\n  @Override\n  public Executor getAsyncExecutor() {\n    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n    executor.setCorePoolSize(5);\n    executor.setMaxPoolSize(10);\n    executor.setQueueCapacity(25);\n    executor.initialize();\n    return executor;\n  }\n}"
    },
    {
      "type": "text",
      "data": "\n\n\n\n\n\n\n<p style=\"margin: 0in;\"><!--StartFragment--><font face=\"Menlo\"><span lang=\"zh-CN\">通过</span><span lang=\"en-US\"><font color=\"#009051\">@Async</font></span><span lang=\"en-US\">\n注解表明该方法是个异步方法</span><span lang=\"zh-CN\">，如果注解在类级别，则表明该类所有方法都是异步方法，异步方法会被自动注入使用</span><span lang=\"zh-CN\"><font color=\"#9437ff\">ThreadPoolTaskExecutor</font></span></font><!--EndFragment--></p><p style=\"margin: 0in;\"><span style=\"color: rgb(0, 144, 81); font-family: Menlo;\">@Async </span><span style=\"font-family: Menlo;\"><font color=\"#929292\">可注解在接口上，所有实现该类的接口都是异步方法</font></span><font face=\"Menlo\"><span lang=\"zh-CN\"><font color=\"#9437ff\"><br></font></span></font></p>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "@Async\npublic void task(){\n}"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}