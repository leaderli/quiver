{
  "title": "fuckyou",
  "cells": [
    {
      "type": "text",
      "data": "<div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div>js</div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnlyjs</div><div><br></div><div>标准对象</div><div>总结一下，有这么几条规则需要遵守：</div><div>不要使用new Number()、new Boolean()、new String()创建包装对象；</div><div>用parseInt()或parseFloat()来转换任意类型到number；</div><div>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</div><div>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；</div><div>typeof操作符可以判断出number、boolean、string、function和undefined；</div><div>判断Array要使用Array.isArray(arr)；</div><div>判断null请使用myVar === null；</div><div>判断某个全局变量是否存在用typeof window.myVar === 'undefined'；</div><div>函数内部判断某个变量是否存在用typeof myVar === 'undefined'。</div><div><br></div><div>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外,虽然null还伪装成了object类型。</div><div><br></div><div>更细心的同学指出，number对象调用toString()报SyntaxError：</div><div>123.toString(); // SyntaxError</div><div>遇到这种情况，要特殊处理一下：</div><div>123..toString(); // '123', 注意是两个点！</div><div>(123).toString(); // '123'</div><div>不要问为什么，这就是JavaScript代码的乐趣！</div><div>JSON</div><div><br></div><div>在JSON中，一共就这么几种数据类型,并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号\"\"，Object的键也必须用双引号\"\"。</div><div><br></div><div>number：和JavaScript的number完全一致；</div><div>boolean：就是JavaScript的true或false；</div><div>string：就是JavaScript的string；</div><div>null：就是JavaScript的null；</div><div>array：就是JavaScript的Array表示方式——[]；</div><div>object：就是JavaScript的{ ... }表示方式。</div><div>COOKIE</div><div>&nbsp; 服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。</div><div><br></div><div>&nbsp; 为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</div><div><br></div><div><br></div>"
    }
  ]
}